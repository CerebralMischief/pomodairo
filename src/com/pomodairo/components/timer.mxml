<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="282" 
	height="80"  
	backgroundAlpha="0.0"
	initialize="init()"
	verticalScrollPolicy="off">
	
	    <mx:Script>
        <![CDATA[
        	import com.pomodairo.events.PomodoroEvent;
        	import com.pomodairo.PomodoroEventDispatcher;
        	import com.pomodairo.Pomodoro;
        	import mx.binding.utils.BindingUtils;
        	import flash.utils.getTimer;
            import flash.utils.Timer;
            import flash.events.TimerEvent;
		    import flash.display.Sprite;
		    import flash.media.Sound;
		    import flash.media.SoundChannel;
		    
		    private static var DEFAULT:String = "default";
		    private static var TIME_OUT:String = "timeout";
		    
        	[Embed(source="alarm.mp3")]
        	public var alarmClass:Class;
        	
        	[Embed(source="ticking.mp3")]
        	public var tickClass:Class;

			[Bindable]
			public var pomodoro:Pomodoro;

            private const MIN_MASK:String = "00";
            private const SEC_MASK:String = "00";
            private const TIMER_INTERVAL:int = 10;

            private var baseTimer:int;
            private var t:Timer;

            private function init():void {
                t = new Timer(TIMER_INTERVAL);
                t.addEventListener(TimerEvent.TIMER, updateTimer);    
                PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.SELECTED, onPomodoroSelected);   	
            }

			private function onPomodoroSelected(e:PomodoroEvent) {
				pomodoro = e.pomodoro;
				newTaskButton.visible = false;
				startTimerButton.visible = true;
				setTimerStyle(DEFAULT);
			}
			
			private function setTimerStyle(status:String):void {
				switch (status) {
					case DEFAULT:
						counter.setStyle("color", "Yellow");
						counter.text = "25:00";
						break;
						
					case TIME_OUT:
						counter.setStyle("color", "Red");
						break;	
				}
			}

            private function updateTimer(evt:TimerEvent):void {
            	if (getTimer() >= baseTimer) {
            		var alarm:Sound = new alarmClass() as Sound;
            		alarm.play();
            		PomodoroEventDispatcher.getInstance().dispatchEvent(new PomodoroEvent(PomodoroEvent.TIME_OUT));
            		t.stop();
            		restartTimer();
            	} else {
	                var d:Date = new Date(baseTimer - getTimer());
	                var min:String = (MIN_MASK + d.minutes).substr(-MIN_MASK.length);
	                var sec:String = (SEC_MASK + d.seconds).substr(-SEC_MASK.length);
	                counter.text = String(min + ":" + sec);
	                if (min == "00") {
	                	setTimerStyle(TIME_OUT);
	                }
	            }
            }

            private function startTimer(event:Event = null):void {
            	setTimerStyle(DEFAULT);
                baseTimer = getTimer();
                baseTimer += 25*60*1000+1000;
                // baseTimer += 6*1000;
                t.start();
                toggleButton();
                
				var startEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.START_POMODORO);
				startEvent.pomodoro = pomodoro;
				PomodoroEventDispatcher.getInstance().dispatchEvent(startEvent);
                
                // Play sound
            	var tick:Sound = new tickClass() as Sound;
            }
            
            private function toggleButton(on:Boolean=false):void
            {
            	if (on)
            	{
            		startTimerButton.visible = true;
            		stopTimerButton.visible = false;
	            } 
	            else
	            {
	            	startTimerButton.visible = false;
	            	stopTimerButton.visible = true;
	            }            	
            }

            private function stopTimer(event:Event=null):void {
                t.stop();
                restartTimer();
            }
            
            private function restartTimer():void {
            	setTimerStyle(TIME_OUT);
                toggleButton(true);
            }
            
            private function createPomodoro():void {
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_POMODORO;
            	input.x = 10;
            	input.y = 10;
            	input.selectAfterCreate = true;
            	this.addChild(input);
            }
        ]]>
    </mx:Script>
    
	<mx:Button id="startTimerButton" label="Start Timer" click="startTimer()" x="192" y="17" visible="false"/>
	<mx:Button id="stopTimerButton" label="Stop Timer" click="stopTimer()" x="192" y="17" visible="false"/>
	<mx:Button id="newTaskButton" label="New Task" click="createPomodoro()" x="192" y="17"/>
	<mx:Label id="counter" fontSize="60"  text="25:00" color="#FFFF00" x="0" y="-7" height="69"/>
	<mx:Label x="10" y="65" text="{pomodoro.name}" width="262" height="17"/>
    
</mx:Canvas>
