<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="312" 
	height="80"  
	backgroundAlpha="0.0"
	initialize="init()"
	creationComplete="created()"
	verticalScrollPolicy="off" horizontalScrollPolicy="off">
	
	    <mx:Script>
        <![CDATA[
        	import mx.utils.ColorUtil;
        	import mx.controls.ColorPicker;
        	import com.pomodairo.RegexUtils;
        	import mx.controls.LinkButton;
        	import com.pomodairo.TaskManager;
        	import mx.collections.ArrayCollection;
        	import com.pomodairo.events.ConfigurationUpdatedEvent;
        	import com.pomodairo.ConfigProperty;
        	import com.pomodairo.db.Storage;
        	import mx.managers.PopUpManager;
        	import com.pomodairo.events.PomodoroEvent;
        	import com.pomodairo.PomodoroEventDispatcher;
        	import com.pomodairo.Pomodoro;
        	import mx.binding.utils.BindingUtils;
        	import flash.utils.getTimer;
            import flash.utils.Timer;
            import flash.events.TimerEvent;
		    import flash.display.Sprite;
		    import flash.media.Sound;
		    import flash.media.SoundChannel;
		    
		    private static var DEFAULT:String = "default";
		    private static var TIME_OUT:String = "timeout";
		    private static var BREAK:String = "break";
		    
		    [Bindable]
		    public var taskManager:TaskManager = TaskManager.instance;
		    
        	[Embed(source="alarm.mp3")]
        	public var alarmClass:Class;
        	
        	[Embed(source="ticking.mp3")]
        	public var tickClass:Class;
						
			[Bindable]
			public var appTitle:String = "pomodairo";

            private const MIN_MASK:String = "00";
            private const SEC_MASK:String = "00";
            private const TIMER_INTERVAL:int = 10;
            private const DELAY_BEFORE_BREAK_STARTS:int = 5000; // Milliseconds

			[Bindable]
			public var pomodoroLengthInMinutes:Number = 25;
			
			private var urlToOpen:String = "";

            private var baseTimer:int;
            private var pomodoroTimer:Timer;
            private var breakTimer:Timer;
            
            private var blinkTimer:Timer = new Timer(300, 0);
            
            private var soundEnabled:Boolean = true;
            
            private function init():void {
                pomodoroTimer = new Timer(TIMER_INTERVAL);
                pomodoroTimer.addEventListener(TimerEvent.TIMER, updateTimer);
                pomodoroTimer.addEventListener(TimerEvent.TIMER, updateAppTitle);
                
				breakTimer = new Timer(TIMER_INTERVAL);
                breakTimer.addEventListener(TimerEvent.TIMER, updateBreakTimer);   
                breakTimer.addEventListener(TimerEvent.TIMER, updateAppTitle); 

                PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.SELECTED, onPomodoroSelected);
                PomodoroEventDispatcher.getInstance().addEventListener(ConfigurationUpdatedEvent.UPDATED, onConfigurationChange);   	   	
            }
			
			private function created():void {
				counter.filters = [glow];
			}
			
			private function onPomodoroSelected(e:PomodoroEvent):void {
				taskManager.setActive(e.pomodoro);
				stopBreakTimer();
				showStartButton();
			}
			
			private function onConfigurationChange(e:ConfigurationUpdatedEvent):void {
				if (e.configElement.name == "pomodoroLength") 
				{
					pomodoroLengthInMinutes = new Number(e.configElement.value);
				}
				
				if (e.configElement.name == "sound") 
				{
					soundEnabled = e.configElement.value == "true";
				}
				
				if (e.configElement.name == "volume") 
				{
					var volume:Number = new Number(e.configElement.value)/100;
					SoundMixer.soundTransform = new SoundTransform(volume);
				}
				
				if (e.configElement.name == "urlToOpen") 
				{
					urlToOpen = e.configElement.value;
				}
			}
			
			private function setTimerStyle(status:String):void {
				switch (status) {
					case DEFAULT:
						counter.setStyle("color", "Yellow");
						glow.color = 16776960;
						counter.filters = [glow];
						stopBlink();
						counter.visible = true;
						break;
						
					case TIME_OUT:
						counter.setStyle("color", "Red");
						glow.color = 16711680;
						counter.filters = [glow];
						break;
						
					case BREAK:
						counter.setStyle("color", "Green");
						glow.color = 26112;
						counter.filters = [glow];
						stopBlink();
						counter.visible = true;
						break;	
				}
			}

            private function updateTimer(evt:TimerEvent):void {
            	if (getTimer() >= baseTimer) {
            		if (soundEnabled) {
	            		var alarm:Sound = new alarmClass() as Sound;
	            		alarm.play();
            		}
            		var timeoutEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.TIME_OUT);
					timeoutEvent.pomodoro = taskManager.activeTask;
            		PomodoroEventDispatcher.getInstance().dispatchEvent(timeoutEvent);
            		pomodoroTimer.stop();
            		setTimerStyle(TIME_OUT);
            		scheduleBreakTimerStart();
            		startBlink();
            	} else {
	                var d:Date = new Date(baseTimer - getTimer());
	                var min:String = (MIN_MASK + d.minutes).substr(-MIN_MASK.length);
	                var sec:String = (SEC_MASK + d.seconds).substr(-SEC_MASK.length);
	                counter.text = String(min + ":" + sec);
	                if (min == "00") {
	                	setTimerStyle(TIME_OUT);
	                }
	            }
            }
            
            private function startBreakTimer(evt:TimerEvent):void
            {
            	baseTimer = getTimer();
            	breakTimer.start();
            	setTimerStyle(BREAK);
            	showBreakButton();
            	pomodoroLabel.label = "On Break";
            }
            
            private function updateBreakTimer(evt:TimerEvent):void 
            {
			    var d:Date = new Date(getTimer() - baseTimer);
	            var min:String = (MIN_MASK + d.minutes).substr(-MIN_MASK.length);
	            var sec:String = (SEC_MASK + (d.seconds)).substr(-SEC_MASK.length);
                counter.text = String(min + ":" + sec);
            }
            
            private function scheduleBreakTimerStart():void
            {
            	var delayBeforeBreakStartTimer:Timer = new Timer(DELAY_BEFORE_BREAK_STARTS, 1);
            	delayBeforeBreakStartTimer.addEventListener(TimerEvent.TIMER, startBreakTimer);
            	delayBeforeBreakStartTimer.start();
            }
            
            private function stopBreakTimer():void
            {
            	breakTimer.stop();
            	showStartButton();
            }

            private function startTimer(event:Event = null):void {
            	setTimerStyle(DEFAULT);
                baseTimer = getTimer();
                baseTimer += pomodoroLengthInMinutes*60*1000+1000;
                //baseTimer += 6*1000;
                pomodoroTimer.start();
                showStopButton();
                hideCloseNextButton();
                
                // Dispatch event
				var startEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.START_POMODORO);
				startEvent.pomodoro = taskManager.activeTask;
				PomodoroEventDispatcher.getInstance().dispatchEvent(startEvent);
                
                // Play sound
            	var tick:Sound = new tickClass() as Sound;
            	//tick.play();
            }
            
            private function updateAppTitle(evt:TimerEvent):void
            {
            	var timer:Timer = evt.target as Timer;
            	var d:Date = new Date(getTimer() - baseTimer);
	           	var remaining:String = String(d.minutes)+"'";
            	if(timer == pomodoroTimer) {            		
            		d = new Date(baseTimer - getTimer());
            		remaining = String(d.minutes)+"'";
		           	if(d.minutes == 0) {
		           		remaining = String(d.seconds)+"''";
		           	}
            	}
            	var title:String = remaining+" "+pomodoroLabel.label; 
            	if (appTitle != title) {
            		appTitle = title;
            	}
            }
            
            private function showBreakButton():void
            {
        		startTimerButton.visible = false;
        		stopTimerButton.visible = false;
        		stopBreakButton.visible = true;
            }            
            
            private function showStartButton():void
            {
        		startTimerButton.visible = true;
        		stopTimerButton.visible = false;
        		stopBreakButton.visible = false;
        		newTaskButton.visible = false;
        		
        		counter.text = toTwoDigitString(pomodoroLengthInMinutes)+":00";
        		var pomodoro:Pomodoro = taskManager.activeTask;
        		pomodoroLabel.label = pomodoro.shortDescription;
        		appTitle = "pomodairo";
        		setTimerStyle(DEFAULT);
            }
            
            private function showStopButton():void
            {
            	startTimerButton.visible = false;
            	stopTimerButton.visible = true;    
            	hideCloseNextButton();        	
            }
            
            private function showNewTaskButton():void
            {
            	startTimerButton.visible = false;
            	stopTimerButton.visible = false;
            	stopBreakButton.visible = false;
            	newTaskButton.visible = true; 
            	counter.text = toTwoDigitString(pomodoroLengthInMinutes)+":00";           	
            }            
            
            private function showNextTaskButton():void 
            {
            	closePomodoroButton.visible = false;
            	nextTaskButton.visible = true;
            }
            
            private function showClosePomoButton():void 
            {
            	closePomodoroButton.visible = true;
            	nextTaskButton.visible = false;
            }
            
            private function hideCloseNextButton():void
            {
            	closePomodoroButton.visible = false;
            	nextTaskButton.visible = false;
            }

            private function stopTimer(event:Event=null):void {
                pomodoroTimer.stop();
                showStartButton();
            }
            
            private function createPomodoro():void {
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_POMODORO;
            	input.selectAfterCreate = true;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }
            
            private function setDoneSelectNextPomodoro():void {
				trace("Done / Next pomodoro.");
            }
            
            private function toTwoDigitString(number:int):String
            {
            	if (number < 10)
            	{
            		return ""+0+number;
            	}
            	return ""+number;
            }
            
            private function showSettingsDialog():void {
            	var dialog:ConfigPanel = new ConfigPanel();
            	PopUpManager.addPopUp(dialog, this, true);
                PopUpManager.bringToFront(dialog);
            }
            
            public function startBlink():void
	        {
	            blinkTimer.addEventListener(TimerEvent.TIMER, toggleText );
	            blinkTimer.start();
	        }
	        
	        public function stopBlink():void
	        {
	            blinkTimer.stop();
	        }
	
	        public function toggleText( event:TimerEvent ):void
	        {
	        	counter.visible = !counter.visible;
	        }
	        
	        public function onClosePomoClicked(event:Event = null):void 
	        {
	        	// Mark done.
	        	var pomodoro:Pomodoro = taskManager.activeTask;
	        	pomodoro.done = true;     
	        	pomodoro.closed = new Date(); 	
	        	
	        	// Dispatch event.
	        	var doneEvent:PomodoroEvent = new PomodoroEvent(PomodoroEvent.DONE);
				doneEvent.pomodoro = pomodoro;
				PomodoroEventDispatcher.getInstance().dispatchEvent(doneEvent);
				
				if(taskManager.hasMoreTasks()) {
					taskManager.nextTask();
	        		showNextTaskButton();
	   			}
	        }

	        public function onNextTaskClicked(event:Event = null):void 
	        {
	        	trace("Next task clicked...");
	        	var result:Boolean = taskManager.nextTask();
	        	if(!result) {
	        		trace("There is no next task!");
	        	}
	        }
	        
	        public function openBugtracker():void {
	        	var ticketId:int = new RegexUtils().extractHashNumber(taskManager.activeTask.name);
	        	if(ticketId > 0) {	        		
		        	var url:String = urlToOpen + ticketId;
		        	trace("Opening ticket #"+ticketId+" in browser...");
		        	navigateToURL(new URLRequest(url), 'quote');
	        	}
	        }
	        
	        private function showStatisticsPanel():void
	        {
	        	trace("Trace: Showing statistics panel...");
            	var myWindow:StatisticsWindow = new StatisticsWindow();
		      	myWindow.systemChrome = NativeWindowSystemChrome.STANDARD;
		      	myWindow.type = NativeWindowType.NORMAL;
		      	myWindow.open( true );
	        }   


        ]]>
    </mx:Script>
    
    <mx:Style>
        @font-face 
        {
            font-family: Digital;
            src: url("assets/digital-7mono.ttf");
        }

        .ClockText 
        { 
            font-family: Digital; 
            font-size: 80pt;    
        }

    </mx:Style>
	
	<!--
	Glass effect wanted! =)
	<mx:Canvas id="clockBG" backgroundColor="#000000" x="4" y="4" height="80" width="190"/>
    -->
    
	<mx:Button id="startTimerButton" label="Start Timer" click="startTimer()"   x="192" y="10" height="40" width="90" visible="false"/>
	<mx:Button id="stopTimerButton" label="Stop Timer" click="stopTimer();showNextTaskButton();"      x="192" y="10" height="40" width="90" visible="false"/>
	<mx:Button id="stopBreakButton" label="Stop Break" click="stopBreakTimer();showClosePomoButton();" x="192" y="10" height="40" width="90" visible="false"/>
	<mx:Button id="newTaskButton" label="New Task" click="createPomodoro()"     x="192" y="10" height="40" width="90" />
	
	<!-- Clock Counter -->
	<mx:Label id="counter" styleName="ClockText" text="{toTwoDigitString(pomodoroLengthInMinutes)}:00" color="#FFFF00" x="2" y="-5" height="69"/>
	<mx:GlowFilter id="glow" color="#FFFF00" alpha="1" blurX="8" blurY="8" strength="1"/>
	
	<mx:LinkButton id="pomodoroLabel" y="65" label="{taskManager.activeTask.shortDescription}" width="90%" height="17" click="openBugtracker()" textAlign="left" x="10" toolTip="{taskManager.activeTask.longDescription}"/>
    <mx:Image id="settingsButton" x="292" y="10" source="assets/appicons/settings.png" mouseDown="showSettingsDialog()" toolTip="Edit settings" 
    	useHandCursor="true" buttonMode="true" mouseChildren="false" />
    <mx:Image id="statisticsButton" x="291" y="29" source="assets/appicons/statistics.png" mouseDown="showStatisticsPanel()" toolTip="Show statistics" 
    	useHandCursor="true" buttonMode="true" mouseChildren="false" />

	<mx:Button id="closePomodoroButton" label="Done" click="onClosePomoClicked()" x="222" y="55" height="25" width="60" visible="false"/>
	<mx:Button id="nextTaskButton" label="Next" click="onNextTaskClicked()"   x="222" y="55" height="25" width="60" visible="false"/>
</mx:Canvas>


