<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml" 
	layout="absolute" height="166" width="320" showFlexChrome="false"
	verticalScrollPolicy="off" horizontalScrollPolicy="off"
	initialize="beforeInit()"
	creationComplete="init()" xmlns:views="com.views.*" xmlns:ns1="com.pomodairo.components.*"
	backgroundColor="#292929"
	closing="beforeClose()"
	title="{timerCanvas.appTitle}">
	
	<mx:Style source="style/style.css"/>
	
    <mx:Script>
        <![CDATA[
        	import com.pomodairo.TaskManager;
        	import com.pomodairo.components.ConfigPanel;
        	import com.pomodairo.db.Storage;
        	import mx.managers.PopUpManager;
        	import air.update.events.UpdateEvent;
        	import air.update.ApplicationUpdaterUI;
        	import com.pomodairo.events.PomodoroEvent;
        	import com.pomodairo.PomodoroEventDispatcher;
        	import com.pomodairo.components.timer;
        	import com.pomodairo.Pomodoro;
        	import com.pomodairo.components.PomoItemInput;
        	import mx.controls.TextInput;
        
			private var appUpdater:ApplicationUpdaterUI = new ApplicationUpdaterUI();
			
			private var taskManager:TaskManager = TaskManager.instance;
				
			private function beforeInit():void {
				alwaysInFront = Storage.instance.config[ConfigPanel.ALWAYS_ON_TOP] == "true";
				var remember:Boolean = Storage.instance.config[ConfigPanel.REMEMBER_POSITION] == "true";
				if (remember)
				{
					var setX:Number = Storage.instance.config["window.x"];
					var setY:Number = Storage.instance.config["window.y"];
					if (setX >= 0) {
						this.nativeWindow.x = setX;
					}
					if (setY >= 0) {
						this.nativeWindow.y = setY;
					}
				}
				
				// Fugly hack... loads and presets all configuration values
				var cfg:ConfigPanel = new ConfigPanel();
				cfg.populate();
				cfg.notifyConfiguration();
			}
				
        	private function init():void {
        		checkForUpdates();
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.START_POMODORO, closeTaskList);
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.SELECTED, onPomodoroSelected);
        		PomodoroEventDispatcher.getInstance().addEventListener(PomodoroEvent.TIME_OUT, onPomodoroTimeout);
        	}
        	
        	private function checkForUpdates():void {
				appUpdater.configurationFile = new File("app:/updateConfig.xml");
				appUpdater.isCheckForUpdateVisible = false;
				appUpdater.addEventListener(UpdateEvent.INITIALIZED,
				updaterInitialised);
				appUpdater.initialize();
			}
				
			private function updaterInitialised(event:UpdateEvent):void {
				appUpdater.checkNow();
			}
        	
        	private function onPomodoroTimeout(event:PomodoroEvent):void {
        		nativeWindow.notifyUser(NotificationType.INFORMATIONAL);
        		nativeWindow.orderToFront();
        	}
        	
        	private function onPomodoroSelected(event:PomodoroEvent):void {
        		trace("Pomodoro selected: "+event.pomodoro.name);
        		unplannedButton.enabled = true;
        		interruptionButton.enabled = true;
        	}
        
            private function toggleTaskList():void {
            	if (!taskListPanel.visible) {
            		this.height = this.height+taskListPanel.height;
					taskListPanel.visible = true;	
            	} else {
            		closeTaskList();
            	}
            }
            
            private function closeTaskList(event:PomodoroEvent=null):void {
            	this.height = 166;
            	taskListPanel.visible = false;
            }

            private function newInterruption():void {
            	trace("Add interruption");
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_INTERRUPTION;
            	input.reference = taskManager.activeTask;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }
            
             private function newUnplanned():void {
            	trace("Add unplanned");
            	var input:PomoItemInput = new PomoItemInput();
            	input.type = Pomodoro.TYPE_UNPLANNED;
            	input.reference = taskManager.activeTask;
            	PopUpManager.addPopUp(input, this, true);
                PopUpManager.centerPopUp(input);
            }
            
            private function beforeClose():void {
            	Storage.instance.setConfigurationValue("window.x",""+this.nativeWindow.x);
            	Storage.instance.setConfigurationValue("window.y",""+this.nativeWindow.y);
            }
        ]]>
    </mx:Script>

	<mx:Fade id="fadein" />
	<mx:Fade id="fadeout" />

	
	<mx:Panel title="Pomodairo" x="0" y="0" height="164" width="320" layout="absolute" mouseDown="{nativeWindow.startMove()}">				
		<ns1:timer id="timerCanvas" x="0" y="0" pomodoroLengthInMinutes="25">
		</ns1:timer>
		<mx:ControlBar id="controls" height="42" y="88">
			<mx:Button label="Task List" click="toggleTaskList()" toolTip="Open/close task list"/>
			<mx:Button label="Unplanned" id="unplannedButton" click="newUnplanned()" toolTip="Add unplanned" enabled="false"/>
			<mx:Button label="Interruption" id="interruptionButton" click="newInterruption()" toolTip="Add interruption" enabled="false"/>
		</mx:ControlBar>
	</mx:Panel>
	
	<mx:Label text="x" click="close()" color="#FFFFFF" x="300" y="6"/>
	<mx:Label text="_" click="minimize()" color="#FFFFFF" x="280" y="6"/>
	
	<mx:Canvas id="taskListPanel" x="0" y="166" height="300" width="320" visible="false" showEffect="fadein" hideEffect="fadeout">				
		<ns1:TaskListCanvas x="0" y="0" height="100%" width="100%">
		</ns1:TaskListCanvas>
	</mx:Canvas>
</mx:WindowedApplication>
